fn main_1() {
    var AR: f32 = 1.0;
    var uv: vec2<f32>;
    var output: vec4<f32> = vec4<f32>(0.0, 0.0, 0.0, 1.0);
    var corner_harshness: f32 = 1.2000000476837158;
    var corner_ease: f32 = 4.0;
    var vv: f32;
    var fade: f32;
    var xx: f32;
    var yy: f32;
    var rr: f32;
    var tuv: vec2<f32>;
    var limit: vec2<f32>;
    var res: f32 = 240.0;
    var res2_: vec2<f32>;
    var res3_: vec2<f32>;
    var res4_: vec2<f32>;
    var pre_i: vec2<f32>;
    var i: vec2<f32>;
    var even: f32 = 0.0;
    var pre_y: f32;
    var tex: vec4<f32> = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    var lum: f32;
    var value: f32;
    var v: f32;
    var tiny: f32;
    var L: f32;
    var wave: f32;
    var scan: f32;
    var split: f32;
    var uv2_: vec2<f32>;
    var uv3_: vec2<f32>;
    var cr: vec2<f32>;
    var cg: vec2<f32>;
    var cb: vec2<f32>;
    var i2_: vec2<f32>;
    var i3_: vec2<f32>;
    var tex2_: vec4<f32> = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    var tex3_: vec4<f32> = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    var ar: f32 = 1.0;
    var ag: f32 = 1.0;
    var ab: f32 = 1.0;
    var pixel_size: f32;
    var col: vec3<f32>;
    var backup: vec3<f32>;

    uv = (vec2<f32>(0.0, 0.0) / vec2<f32>(100.0, 100.0));
    vv = (2.0 - min((1.0 % 10.0), 2.0));
    let _e46 = vv;
    let _e52 = vv;
    fade = max(pow(_e52, 16.0), 1.0);
    let _e58 = uv;
    let _e62 = uv;
    let _e67 = corner_harshness;
    xx = (abs((_e62.x - 0.5)) * _e67);
    let _e70 = uv;
    let _e74 = uv;
    let _e79 = corner_harshness;
    let _e81 = fade;
    yy = ((abs((_e74.y - 0.5)) * _e79) * _e81);
    let _e85 = xx;
    let _e86 = xx;
    let _e88 = yy;
    let _e89 = yy;
    let _e93 = xx;
    let _e94 = xx;
    let _e96 = yy;
    let _e97 = yy;
    let _e100 = corner_ease;
    rr = (1.0 + pow(((_e93 * _e94) + (_e96 * _e97)), _e100));
    let _e104 = uv;
    let _e108 = rr;
    tuv = (((_e104 - vec2<f32>(0.5)) * _e108) + vec2<f32>(0.5));
    let _e117 = tuv;
    tuv = clamp(_e117, vec2<f32>(0.0), vec2<f32>(1.0));
    let _e123 = tuv;
    uv = _e123;
    let _e131 = uv;
    let _e137 = uv;
    limit = (step(vec2<f32>(0.0, 0.0), _e131) * step(_e137, vec2<f32>(1.0, 1.0)));
    let _e144 = uv;
    let _e148 = uv;
    let _e153 = uv;
    let _e158 = uv;
    if (((((_e144.x > 0.0) && (_e148.x < 1.0)) && (_e153.y > 0.0)) && (_e158.y < 1.0))) {
        {
            let _e165 = res;
            let _e166 = res;
            let _e167 = AR;
            res2_ = vec2<f32>(_e165, (_e166 / _e167));
            let _e171 = res2_;
            res3_ = _e171;
            let _e173 = res2_;
            res4_ = _e173;
            let _e175 = uv;
            let _e176 = res2_;
            let _e178 = uv;
            let _e179 = res2_;
            pre_i = floor((_e178 * _e179));
            let _e183 = pre_i;
            let _e184 = res2_;
            i = (_e183 / _e184);
            let _e189 = pre_i;
            let _e192 = pre_i;
            if (((_e192.y % 2.0) == 0.0)) {
                {
                    let _e199 = res2_;
                    even = (0.5 / _e199.x);
                    let _e203 = uv;
                    let _e205 = even;
                    uv.x = (_e203.x + _e205);
                    let _e207 = uv;
                    let _e209 = res2_;
                    let _e212 = uv;
                    let _e214 = res2_;
                    pre_y = floor((_e212.x * _e214.x));
                    let _e220 = pre_y;
                    let _e221 = res2_;
                    i.y = (_e220 / _e221.x);
                    let _e224 = uv;
                    let _e225 = res2_;
                    let _e227 = uv;
                    let _e228 = res2_;
                    let _e231 = res2_;
                    i = (floor((_e227 * _e228)) / _e231);
                }
            }
            let _e240 = tex;
            let _e244 = tex;
            let _e249 = tex;
            lum = (((0.2125999927520752 * _e240.x) + (0.7152000069618225 * _e244.y)) + (0.0722000002861023 * _e249.z));
            let _e257 = lum;
            let _e262 = lum;
            value = smoothStep(0.05000000074505806, 0.6000000238418579, (1.0 - _e262));
            let _e268 = value;
            v = min(_e268, 1.0);
            let _e273 = uv;
            let _e282 = uv;
            let _e296 = uv;
            let _e305 = uv;
            tiny = cos(((6.28000020980835 * (((_e305.y + (1.0 * 0.10000000149011612)) * 0.20000000298023224) % 0.009999999776482582)) * 300.0));
            let _e322 = uv;
            let _e330 = uv;
            L = (0.0 + (0.009999999776482582 * cos(((_e330.x * 1.2000000476837158) + (1.0 * 20.0)))));
            let _e343 = i;
            let _e346 = L;
            let _e349 = i;
            let _e351 = L;
            let _e352 = L;
            let _e358 = i;
            let _e361 = L;
            let _e364 = i;
            let _e366 = L;
            let _e367 = L;
            wave = (cos((6.28000020980835 * smoothStep(_e364.y, _e366, (_e367 + 0.05000000074505806)))) / 5.0);
            let _e379 = wave;
            let _e382 = tiny;
            let _e388 = wave;
            let _e391 = tiny;
            scan = cos((1.5700000524520874 + ((3.140000104904175 * (0.20000000298023224 - _e388)) * _e391)));
            let _e399 = v;
            split = max(0.33000001311302185, _e399);
            let _e402 = uv;
            let _e403 = split;
            let _e407 = res;
            uv2_ = (_e402 + vec2<f32>(((-(_e403) * 0.20000000298023224) / _e407), 0.0));
            let _e413 = uv;
            let _e414 = split;
            let _e418 = res;
            uv3_ = (_e413 + vec2<f32>(((-(_e414) * 0.4000000059604645) / _e418), 0.0));
            let _e425 = uv2_;
            let _e428 = scan;
            uv2_.x = (_e425.x + ((3.0 * _e428) / 240.0));
            let _e434 = uv3_;
            let _e437 = scan;
            uv3_.y = (_e434.y - ((3.0 * _e437) / 240.0));
            let _e444 = res2_;
            let _e447 = uv;
            let _e449 = res2_;
            let _e453 = res2_;
            cr = ((_e447 % (vec2<f32>(1.0) / _e449)) * _e453);
            let _e458 = res3_;
            let _e461 = uv2_;
            let _e463 = res3_;
            let _e467 = res3_;
            cg = ((_e461 % (vec2<f32>(1.0) / _e463)) * _e467);
            let _e472 = res4_;
            let _e475 = uv3_;
            let _e477 = res4_;
            let _e481 = res4_;
            cb = ((_e475 % (vec2<f32>(1.0) / _e477)) * _e481);
            let _e484 = uv2_;
            let _e485 = res3_;
            let _e487 = uv2_;
            let _e488 = res3_;
            let _e491 = res3_;
            i2_ = (floor((_e487 * _e488)) / _e491);
            let _e494 = uv3_;
            let _e495 = res4_;
            let _e497 = uv3_;
            let _e498 = res4_;
            let _e501 = res4_;
            i3_ = (floor((_e497 * _e498)) / _e501);
            let _e525 = split;
            pixel_size = (((0.4000000059604645 + 1.0) - _e525) * 2.0);
            let _e531 = cr;
            let _e534 = split;
            cr.x = (_e531.x * (0.6600000262260437 + _e534));
            let _e538 = cg;
            let _e541 = split;
            cg.x = (_e538.x * (0.6600000262260437 + _e541));
            let _e545 = cb;
            let _e548 = split;
            cb.x = (_e545.x * (0.6600000262260437 + _e548));
            let _e551 = split;
            if ((_e551 > 0.20000000298023224)) {
                {
                    let _e555 = cr;
                    let _e559 = cr;
                    let _e566 = cr;
                    let _e570 = cr;
                    let _e577 = pixel_size;
                    ar = (((0.5 - abs((_e559.x - 0.5))) * (0.5 - abs((_e570.y - 0.5)))) * _e577);
                    let _e580 = cg;
                    let _e584 = cg;
                    let _e591 = cg;
                    let _e595 = cg;
                    let _e602 = pixel_size;
                    ag = (((0.5 - abs((_e584.x - 0.5))) * (0.5 - abs((_e595.y - 0.5)))) * _e602);
                    let _e605 = cb;
                    let _e609 = cb;
                    let _e616 = cb;
                    let _e620 = cb;
                    let _e627 = pixel_size;
                    ab = (((0.5 - abs((_e609.x - 0.5))) * (0.5 - abs((_e620.y - 0.5)))) * _e627);
                }
            }
            let _e629 = ar;
            let _e632 = ar;
            let _e637 = ar;
            let _e640 = ar;
            ar = min(floor((_e640 + 0.9700000286102295)), 1.0);
            let _e646 = ag;
            let _e649 = ag;
            let _e654 = ag;
            let _e657 = ag;
            ag = min(floor((_e657 + 0.9700000286102295)), 1.0);
            let _e663 = ab;
            let _e666 = ab;
            let _e671 = ab;
            let _e674 = ab;
            ab = min(floor((_e674 + 0.9700000286102295)), 1.0);
            let _e680 = tex;
            let _e682 = ar;
            let _e684 = tex2_;
            let _e686 = ag;
            let _e688 = tex3_;
            let _e690 = ab;
            col = vec3<f32>((_e680.x * _e682), (_e684.y * _e686), (_e688.z * _e690));
            let _e694 = tex;
            let _e696 = tex2_;
            let _e698 = tex3_;
            backup = vec3<f32>(_e694.x, _e696.y, _e698.z);
            let _e702 = col;
            output = vec4<f32>(_e702.x, _e702.y, _e702.z, 1.0);
            return;
        }
    } else {
        return;
    }
}

[[stage(fragment)]]
fn main() {
    main_1();
    return;
}
