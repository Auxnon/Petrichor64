fn findSplit(uv: vec2<f32>, res2_: vec2<f32>, offset: vec2<f32>) -> vec4<f32> {
    var uv_1: vec2<f32>;
    var res2_1: vec2<f32>;
    var offset_1: vec2<f32>;
    var i: vec2<f32>;
    var tex: vec4<f32>;
    var lum: f32;
    var value: f32;
    var v: f32;
    var split: f32;

    uv_1 = uv;
    res2_1 = res2_;
    offset_1 = offset;
    let _e6 = offset_1;
    let _e7 = uv_1;
    let _e8 = res2_1;
    _ = (_e7 * _e8);
    let _e10 = uv_1;
    let _e11 = res2_1;
    let _e15 = res2_1;
    i = ((_e6 + floor((_e10 * _e11))) / _e15);
    let _e18 = i;
    let _e22 = i;
    if ((_e18.x < 0.0) || (_e22.x > 1.0)) {
        {
            return vec4<f32>(0.0, 0.0, 0.0, 1.0);
        }
    }
    tex = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    let _e39 = tex;
    let _e43 = tex;
    let _e48 = tex;
    lum = (((0.2125999927520752 * _e39.x) + (0.7152000069618225 * _e43.y)) + (0.0722000002861023 * _e48.z));
    let _e56 = lum;
    _ = (1.0 - _e56);
    let _e61 = lum;
    value = smoothstep(0.05000000074505806, 0.6000000238418579, (1.0 - _e61));
    _ = value;
    let _e67 = value;
    v = min(_e67, 1.0);
    _ = v;
    let _e74 = v;
    split = max(0.33000001311302185, _e74);
    let _e77 = tex;
    let _e78 = _e77.xyz;
    let _e79 = split;
    return vec4<f32>(_e78.x, _e78.y, _e78.z, _e79);
}

fn path(uv_2: vec2<f32>, res: vec2<f32>, mask: vec3<f32>, shift: vec2<f32>) -> vec2<f32> {
    var uv_3: vec2<f32>;
    var res_1: vec2<f32>;
    var mask_1: vec3<f32>;
    var shift_1: vec2<f32>;
    var v_1: vec4<f32>;
    var vl: vec4<f32>;
    var vr: vec4<f32>;
    var split_1: f32;
    var split_l: f32;
    var split_r: f32;
    var c: vec2<f32>;
    var full: f32;
    var total_split: f32;
    var f: f32;
    var side: f32;
    var f_1: f32;
    var side_1: f32;
    var pixel_size: f32;
    var a: f32;

    uv_3 = uv_2;
    res_1 = res;
    mask_1 = mask;
    shift_1 = shift;
    _ = uv_3;
    _ = res_1;
    _ = vec2<f32>(0.0, 0.0);
    let _e13 = uv_3;
    let _e14 = res_1;
    let _e18 = findSplit(_e13, _e14, vec2<f32>(0.0, 0.0));
    v_1 = _e18;
    _ = uv_3;
    _ = res_1;
    _ = vec2<f32>(-(1.0), 0.0);
    let _e26 = uv_3;
    let _e27 = res_1;
    let _e32 = findSplit(_e26, _e27, vec2<f32>(-(1.0), 0.0));
    vl = _e32;
    _ = uv_3;
    _ = res_1;
    _ = vec2<f32>(1.0, 0.0);
    let _e39 = uv_3;
    let _e40 = res_1;
    let _e44 = findSplit(_e39, _e40, vec2<f32>(1.0, 0.0));
    vr = _e44;
    let _e46 = v_1;
    split_1 = _e46.w;
    let _e49 = vl;
    split_l = _e49.w;
    let _e52 = vr;
    split_r = _e52.w;
    let _e55 = uv_3;
    let _e56 = shift_1;
    _ = (_e55 + _e56);
    let _e59 = res_1;
    _ = (vec2<f32>(1.0) / _e59);
    let _e62 = uv_3;
    let _e63 = shift_1;
    let _e64 = (_e62 + _e63);
    let _e66 = res_1;
    let _e68 = (vec2<f32>(1.0) / _e66);
    let _e73 = res_1;
    c = ((_e64 - (floor((_e64 / _e68)) * _e68)) * _e73);
    let _e76 = mask_1;
    let _e78 = v_1;
    let _e81 = mask_1;
    let _e83 = v_1;
    let _e87 = mask_1;
    let _e89 = v_1;
    full = (((_e76.x * _e78.x) + (_e81.y * _e83.y)) + (_e87.z * _e89.z));
    let _e94 = split_1;
    total_split = _e94;
    let _e96 = c;
    if (_e96.x > 0.75) {
        {
            let _e101 = c;
            f = (1.0 - ((_e101.x - 0.75) / 0.5));
            let _e109 = split_1;
            let _e110 = f;
            let _e112 = split_r;
            let _e114 = f;
            total_split = ((_e109 * _e110) + (_e112 * (1.0 - _e114)));
            let _e118 = mask_1;
            let _e120 = vr;
            let _e123 = mask_1;
            let _e125 = vr;
            let _e129 = mask_1;
            let _e131 = vr;
            side = (((_e118.x * _e120.x) + (_e123.y * _e125.y)) + (_e129.z * _e131.z));
            let _e136 = full;
            let _e137 = f;
            let _e139 = side;
            let _e141 = f;
            full = ((_e136 * _e137) + (_e139 * (1.0 - _e141)));
        }
    } else {
        let _e145 = c;
        if (_e145.x < 0.25) {
            {
                let _e149 = c;
                f_1 = ((_e149.x / 0.5) + 0.5);
                let _e156 = mask_1;
                let _e158 = vl;
                let _e161 = mask_1;
                let _e163 = vl;
                let _e167 = mask_1;
                let _e169 = vl;
                side_1 = (((_e156.x * _e158.x) + (_e161.y * _e163.y)) + (_e167.z * _e169.z));
                let _e174 = split_1;
                let _e175 = f_1;
                let _e177 = split_l;
                let _e179 = f_1;
                total_split = ((_e174 * _e175) + (_e177 * (1.0 - _e179)));
                let _e183 = full;
                let _e184 = f_1;
                let _e186 = side_1;
                let _e188 = f_1;
                full = ((_e183 * _e184) + (_e186 * (1.0 - _e188)));
            }
        }
    }
    let _e195 = total_split;
    pixel_size = (((0.800000011920929 + 1.0) - _e195) * 1.0);
    a = 1.0;
    let _e202 = total_split;
    if (_e202 > 0.0) {
        {
            let _e206 = c;
            _ = (_e206.y - 0.5);
            let _e210 = c;
            let _e216 = pixel_size;
            a = (((0.5 - abs((_e210.y - 0.5))) * _e216) * 0.20000000298023224);
        }
    }
    let _e220 = a;
    a = (_e220 * 16.0);
    let _e223 = a;
    let _e224 = full;
    return vec2<f32>(_e223, _e224);
}

fn main_1() {
    var fragColor: vec4<f32>;
    var AR: f32;
    var uv_4: vec2<f32>;
    var corner_harshness: f32;
    var corner_ease: f32;
    var vv: f32;
    var fade: f32;
    var xx: f32;
    var yy: f32;
    var rr: f32;
    var tuv: vec2<f32>;
    var res_2: f32;
    var res2_2: vec2<f32>;
    var res3_: vec2<f32>;
    var res4_: vec2<f32>;
    var shift_2: f32;
    var i_1: vec2<f32>;
    var tex_1: vec4<f32>;
    var lum_1: f32;
    var value_1: f32;
    var v_2: f32;
    var split_2: f32;
    var L: f32;
    var wave: f32;
    var scanny: f32;
    var vvv: f32;
    var r: vec2<f32>;
    var red: f32;
    var ar: f32;
    var uv2_: vec2<f32>;
    var uv3_: vec2<f32>;
    var g: vec2<f32>;
    var b: vec2<f32>;
    var ag: f32;
    var green: f32;
    var ab: f32;
    var blue: f32;
    var col: vec3<f32>;
    var vx: f32;
    var vy: f32;
    var r_1: f32;

    fragColor = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    AR = (vec2<f32>(100.0, 100.0).x / vec2<f32>(100.0, 100.0).y);
    uv_4 = (vec2<f32>(0.0, 0.0) / vec2<f32>(100.0, 100.0).xy);
    corner_harshness = 1.2000000476837158;
    corner_ease = 4.0;
    _ = (1.0 - (floor((1.0 / 10.0)) * 10.0));
    vv = (2.0 - min((1.0 - (floor((1.0 / 10.0)) * 10.0)), 2.0));
    _ = vv;
    let _e53 = vv;
    _ = pow(_e53, 16.0);
    _ = vv;
    let _e59 = vv;
    fade = max(pow(_e59, 16.0), 1.0);
    fade = 1.0;
    let _e66 = uv_4;
    _ = (_e66.x - 0.5);
    let _e70 = uv_4;
    let _e75 = corner_harshness;
    xx = (abs((_e70.x - 0.5)) * _e75);
    let _e78 = uv_4;
    _ = (_e78.y - 0.5);
    let _e82 = uv_4;
    let _e87 = corner_harshness;
    yy = (abs((_e82.y - 0.5)) * _e87);
    let _e91 = xx;
    let _e92 = xx;
    let _e94 = yy;
    let _e95 = yy;
    _ = ((_e91 * _e92) + (_e94 * _e95));
    _ = corner_ease;
    let _e99 = xx;
    let _e100 = xx;
    let _e102 = yy;
    let _e103 = yy;
    let _e106 = corner_ease;
    rr = (1.0 + pow(((_e99 * _e100) + (_e102 * _e103)), _e106));
    let _e110 = uv_4;
    let _e114 = rr;
    tuv = (((_e110 - vec2<f32>(0.5)) * _e114) + vec2<f32>(0.5));
    _ = tuv;
    let _e123 = tuv;
    tuv = clamp(_e123, vec2<f32>(0.0), vec2<f32>(1.0));
    let _e129 = tuv;
    uv_4 = _e129;
    let _e130 = uv_4;
    let _e134 = uv_4;
    let _e139 = uv_4;
    let _e144 = uv_4;
    if ((((_e130.x > 0.0) && (_e134.x < 1.0)) && (_e139.y > 0.0)) && (_e144.y < 1.0)) {
        {
            let _e149 = uv_4;
            _ = (_e149.y - 0.5);
            let _e153 = uv_4;
            let _e158 = corner_harshness;
            let _e160 = fade;
            yy = ((abs((_e153.y - 0.5)) * _e158) * _e160);
            let _e163 = xx;
            let _e164 = xx;
            let _e166 = yy;
            let _e167 = yy;
            _ = ((_e163 * _e164) + (_e166 * _e167));
            _ = corner_ease;
            let _e171 = xx;
            let _e172 = xx;
            let _e174 = yy;
            let _e175 = yy;
            let _e178 = corner_ease;
            rr = (1.0 + pow(((_e171 * _e172) + (_e174 * _e175)), _e178));
            let _e181 = uv_4;
            let _e185 = rr;
            tuv = (((_e181 - vec2<f32>(0.5)) * _e185) + vec2<f32>(0.5));
            _ = tuv;
            let _e193 = tuv;
            tuv = clamp(_e193, vec2<f32>(0.0), vec2<f32>(1.0));
            let _e199 = tuv;
            uv_4 = _e199;
            let _e200 = uv_4;
            let _e204 = uv_4;
            let _e209 = uv_4;
            let _e214 = uv_4;
            if ((((_e200.x > 0.0) && (_e204.x < 1.0)) && (_e209.y > 0.0)) && (_e214.y < 1.0)) {
                {
                    let _e219 = uv_4;
                    _ = (1.0 - (floor((1.0 / 1.0)) * 1.0));
                    _ = (min((1.0 - (floor((1.0 / 1.0)) * 1.0)), 2.0) * 2000.0);
                    _ = (1.0 - (floor((1.0 / 1.0)) * 1.0));
                    uv_4 = (_e219 + vec2<f32>((sin((min((1.0 - (floor((1.0 / 1.0)) * 1.0)), 2.0) * 2000.0)) / 10000.0)));
                    _ = vec2<f32>(100.0, 100.0).x;
                    res_2 = min(320.0, vec2<f32>(100.0, 100.0).x);
                    let _e279 = res_2;
                    let _e282 = res_2;
                    let _e283 = AR;
                    res2_2 = vec2<f32>((_e279 * 0.5), (_e282 / _e283));
                    let _e287 = res2_2;
                    res3_ = _e287;
                    let _e289 = res2_2;
                    res4_ = _e289;
                    let _e292 = res_2;
                    shift_2 = (1.0 / _e292);
                    let _e295 = uv_4;
                    let _e296 = res2_2;
                    _ = (_e295 * _e296);
                    let _e298 = uv_4;
                    let _e299 = res2_2;
                    let _e302 = res2_2;
                    i_1 = (floor((_e298 * _e299)) / _e302);
                    tex_1 = vec4<f32>(1.0, 1.0, 1.0, 1.0);
                    let _e312 = tex_1;
                    let _e316 = tex_1;
                    let _e321 = tex_1;
                    lum_1 = (((0.2125999927520752 * _e312.x) + (0.7152000069618225 * _e316.y)) + (0.0722000002861023 * _e321.z));
                    let _e329 = lum_1;
                    _ = (1.0 - _e329);
                    let _e334 = lum_1;
                    value_1 = smoothstep(0.05000000074505806, 0.6000000238418579, (1.0 - _e334));
                    _ = value_1;
                    let _e340 = value_1;
                    v_2 = min(_e340, 1.0);
                    _ = v_2;
                    let _e347 = v_2;
                    split_2 = max(0.33000001311302185, _e347);
                    let _e351 = uv_4;
                    _ = ((_e351.x * 1.2000000476837158) + (1.0 * 20.0));
                    let _e359 = uv_4;
                    L = (0.009999999776482582 * cos(((_e359.x * 1.2000000476837158) + (1.0 * 20.0))));
                    let _e371 = i_1;
                    _ = _e371.y;
                    _ = L;
                    let _e374 = L;
                    _ = (_e374 + 0.05000000074505806);
                    let _e377 = i_1;
                    let _e379 = L;
                    let _e380 = L;
                    _ = (6.28000020980835 * smoothstep(_e377.y, _e379, (_e380 + 0.05000000074505806)));
                    let _e386 = i_1;
                    _ = _e386.y;
                    _ = L;
                    let _e389 = L;
                    _ = (_e389 + 0.05000000074505806);
                    let _e392 = i_1;
                    let _e394 = L;
                    let _e395 = L;
                    wave = (cos((6.28000020980835 * smoothstep(_e392.y, _e394, (_e395 + 0.05000000074505806)))) / 5.0);
                    let _e407 = wave;
                    _ = (1.5700000524520874 + (3.140000104904175 * (0.20000000298023224 - _e407)));
                    let _e414 = wave;
                    scanny = cos((1.5700000524520874 + (3.140000104904175 * (0.20000000298023224 - _e414))));
                    let _e421 = scanny;
                    let _e423 = uv_4;
                    _ = ((_e423.x * 16.0) + (1.0 * 16.0));
                    let _e431 = uv_4;
                    let _e441 = res_2;
                    vvv = (((2.0 * _e421) * cos(((_e431.x * 16.0) + (1.0 * 16.0)))) / _e441);
                    _ = uv_4;
                    _ = res2_2;
                    _ = vec3<f32>(1.0, 0.0, 0.0);
                    let _e451 = vvv;
                    _ = vec2<f32>(0.0, _e451);
                    let _e453 = uv_4;
                    let _e454 = res2_2;
                    let _e460 = vvv;
                    let _e462 = path(_e453, _e454, vec3<f32>(1.0, 0.0, 0.0), vec2<f32>(0.0, _e460));
                    r = _e462;
                    let _e464 = r;
                    red = _e464.y;
                    let _e467 = r;
                    ar = _e467.x;
                    let _e470 = uv_4;
                    uv2_ = _e470;
                    let _e472 = uv_4;
                    uv3_ = _e472;
                    _ = uv2_;
                    _ = res3_;
                    _ = vec3<f32>(0.0, 1.0, 0.0);
                    _ = vec2<f32>(0.0, 0.0);
                    let _e483 = uv2_;
                    let _e484 = res3_;
                    let _e492 = path(_e483, _e484, vec3<f32>(0.0, 1.0, 0.0), vec2<f32>(0.0, 0.0));
                    g = _e492;
                    _ = uv3_;
                    _ = res4_;
                    _ = vec3<f32>(0.0, 0.0, 1.0);
                    let _e501 = vvv;
                    _ = vec2<f32>(0.0, -(_e501));
                    let _e504 = uv3_;
                    let _e505 = res4_;
                    let _e511 = vvv;
                    let _e514 = path(_e504, _e505, vec3<f32>(0.0, 0.0, 1.0), vec2<f32>(0.0, -(_e511)));
                    b = _e514;
                    let _e516 = g;
                    ag = _e516.x;
                    let _e519 = g;
                    green = _e519.y;
                    let _e522 = b;
                    ab = _e522.x;
                    let _e525 = b;
                    blue = _e525.y;
                    let _e528 = red;
                    let _e529 = ar;
                    let _e531 = green;
                    let _e532 = ag;
                    let _e534 = blue;
                    let _e535 = ab;
                    col = vec3<f32>((_e528 * _e529), (_e531 * _e532), (_e534 * _e535));
                    let _e539 = col;
                    fragColor = vec4<f32>(_e539.x, _e539.y, _e539.z, 1.0);
                    return;
                }
            } else {
                {
                    fragColor = vec4<f32>(0.0, 0.0, 0.0, 1.0);
                    return;
                }
            }
        }
    } else {
        {
            let _e550 = uv_4;
            _ = (_e550.x - 0.5);
            let _e554 = uv_4;
            vx = abs((_e554.x - 0.5));
            let _e560 = uv_4;
            _ = (_e560.y - 0.5);
            let _e564 = uv_4;
            vy = abs((_e564.y - 0.5));
            let _e570 = vx;
            let _e571 = vy;
            _ = (_e570 - _e571);
            let _e573 = vx;
            let _e574 = vy;
            _ = abs((_e573 - _e574));
            let _e578 = vx;
            let _e579 = vy;
            _ = (_e578 - _e579);
            let _e581 = vx;
            let _e582 = vy;
            r_1 = min(abs((_e581 - _e582)), 0.25);
            let _e588 = r_1;
            let _e589 = r_1;
            let _e590 = r_1;
            fragColor = vec4<f32>(_e588, _e589, _e590, 1.0);
            return;
        }
    }
}

@fragment 
fn main() {
    main_1();
    return;
}
